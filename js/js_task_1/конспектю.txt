У JavaScript існують такі типи даних:
Основні типи даних:

Boolean - логічний (булевий) тип даних: true і false

Number числа цілі, наприклад: 3 або з плаваючою крапкою наприклад: 1.6

String - рядок, символьний тип даних, тобто послідовність символів.

Symbol - примітивний тип даних (новий тип даних який появився в специфікації ES6)

Спеціальний тип даних:
undefined - зміна якій не присвоїли значення.
null - нулєве значення, "пусте значення".

Для визначення типу використовують typeof.
typeof - повертає текстову назву типу даних.

`` - шаблоні рядки.

Синтаксис:
var s = `текст шаблона`;
Параметри:
s - змінна які присвоюється рядок.

Опис:
`` шаблоний рядок (шаблоний літерал) який дозволяє створювати рядок за вказаним шаблоном.

Можливі вказувати в шаблонні:
вираз. Дозволяє вставляти вирази: змінні, функції і т.п. у рядок: ${вираз}
var a=12;
var s = `тест ${a}`;
alert(s);
розрив рядків. Дозволяє створювати рядки з розривами.
var s = `рядок 1
рядок 2
рядок 3`;
alert(s);
Шаблоні рядки можна передавати функціям без дужок:

JavaScript: Конкатенация
В веб-разработке программы постоянно оперируют строками. Всё, что мы видим на сайтах, так или иначе представлено в виде текста. Этот текст чаще всего динамический, то есть полученный из разных частей, которые соединяются вместе. Операция соединения строк в программировании называется конкатенацией.

// Оператор такой же, как и при сложении чисел
// но здесь он имеет другой смысл (семантику)
console.log('Dragon' + 'stone');
// => Dragonstone
Склеивание строк всегда происходит в том же порядке, в котором записаны операнды. Левый операнд становится левой частью строки, а правый — правой.

Boolean
У JavaScript існує логічний тип даних Boolean і об'єкт Boolean.

Boolean як логічний тип даних.
Bolean - логічний (булевий) тип даних. Примітивний тип даних в інформатиці , що може приймати два можливих значення, що іноді називаються істиною(true) і хибою(false) (так і ні).

Приклад присвоєння зміні true.


var a=true; //зміні a присвоюється true

Присвоювати зміні можна і порівняння.


x= 5>3; //зміні x присвоює true

var a=4, b=6;
a=(a+b)/2;
x=a<b; //x присвоюємо true, так як a менше b

Логічний тип даних перевіряється на true чи false умовним оператором if. Приклад перевірки логічного типу:


var x=true;

if(x==true) alert('істина');
else alert('хиба');

Boolean як об'єкт.
Об'єкт Boolean являється оболонкою логічного типу даних Boolean.

Синтаксис об'єкта Boolean:
bol=new Boolean([value]);
Параметри:
bol зміна якій буде присвоєно об'єкт Boolean.

value не обов'язковий параметр. Значення об'єкта.

Опис:
При створені об'єкта значення value перетворюється у логічний тип даних. Якщо значення value не вказано або дорівнює 0, false, Nan, undefined, null, порожній рядок "" тоді value дорівнює false інакше true.


var x= new Boolean(false); //false
var x= new Boolean(0); //false
var x= new Boolean(-0); //false
var x= new Boolean(""); //false
var x= new Boolean(null); //false
var x= new Boolean(NaN); //false
var x= new Boolean(undefined); //false

var x= new Boolean(true); //true
var x= new Boolean(1); //true
var x= new Boolean(16); //true
var x= new Boolean('текст'); //true
var x= new Boolean('false'); //true
var x= new Boolean({}); //true
var x= new Boolean([]); //true
var x= new Boolean('false'); //true

Не слід плутати значення логічного типу true і false зі значеннями об'єкту Boolean true і false.

Не використовуйте об'єкт Boolean замість логічного типу даних. Адже умовний оператор if любий об'єкт вважає як true.


var x= Boolean(false);
var y= new Boolean(false); //об'єкту присвоюємо false

if(x) alert('x = true');
if(y) alert('y = true'); // хоч і об'єкту присвоєно false, оператор if об'єкт вважає як true;

Якщо уже використовуєте об'єкт Boolean то при використанні умовного оператора щодо об'єкту використовуйте умовне порівняння == або ще краще ===. Приклад правильного порівняння у умовному операторі if для об'єкта Boolean:


var y= new Boolean(false);

if(y) alert('y = true');
if(y==true) alert('y == true'); 
if(y==false) alert('y = false');

У явному JavaScript-програмуванню об'єкт Boolean не використовується, а використовують логічний тип даних.

Методи:
Boolean.toString() - повертає рядкове представлення об'єкту.
Boolean.valueOf() - повертає примітивне значення об'єкта.


NaN
Глобальна властивість NaN є значенням, представляюче не число (Not-A-Number).

Синтаксис:
NaN
Опис:
NaN є властивістю глобального об'єкта. Початковим значенням NaN є не-число (Not-A-Number) - те ж саме значення має Number.NaN.

В сучасних браузерах NaN є не зміною властивістю. Навіть коли це не так, уникайте її перевизначення.

У коді NaN використовується рідко. Вона виникає коли математичні функції не можуть повернути значення (наприклад, при виклику Math.sqrt(-1)) або коли функція зчитування числа з рядка не може це зробити, тому що в рядку не число (parseInt ( 'ляляля')).

Перевірка NaN на рівність оператором рівності (== і ===) не можуть використовуватися для NaN. Замість них використовуйте функції Number.isNaN() або isNaN().

Приклад:
var n=Number('5# @');
alert(n); //NaN

n = Math.sqrt(-1);
alert(n); //NaN

Зверніть увагу що typeof(NaN) видає number.

var x=5*'Текст';
alert(x); //NaN
alert(typeof(x)); //number

NaN === NaN ; // false
Number.NaN === NaN ; // false
isNaN(NaN); // true
isNaN(Number.NaN); // true
