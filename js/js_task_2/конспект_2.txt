; МАСИВИ array
Масив - структура даних для зберігання і маніпулювання колекцією індексованих значень. Використовується для зберігання впорядкованих колекцій даних, наприклад, списку курортів, товарів, клієнтів в готелі тощо.

Створення
Масив оголошується і береться у квадратні дужки [] - літералом масиву. Всередині дужок кожен елемент масиву розділяється комою.


const clients = ["Mango", "Poly", "Ajax"];



масив - складний тип даних, якщо йде порівняння робимо їх за посиланням


; Об’єкти дозволяють зберігати набори значень з ключами. Це чудово.
; Але досить часто ми розуміємо, що нам необхідна впорядкована колекція даних, яка складається з 1-го, 2-го, 3-го і т.д. елементів. Наприклад, така колеція може знадобитись для зберігання списку користувачів, товарів, HTML елементів та ін.
; Використовувати об’єкти в такому випадку не зручно, тому що вони не надають методів управління порядком елементів. Ми не можемо вставити нову властивість “між” існуючих. Об’єкти просто не призначені для цього.
; Для зберігання впорядкованих колекцій існує інший тип даних, який має назву масив, Array.


; Завдання 4/32
; Масив використовується для зберігання впорядкованої колекції елементів. Він оголошується відкритою і закритою квадратною дужкою [] - літералом масиву. Всередині дужок кожен елемент масиву розділяється комою.

; const planets = ["Earth", "Mars", "Venus"];
; Корисно
; Оголошуючи змінну для об'єкта або масиву, програмісти, як правило, використовують const. Вони роблять це для того, щоб випадково не перезаписати значення, оскільки спроба перезапису викличе помилку до того, як код потрапить до користувача.

Для доступу до значення елемента масиву застосовують синтаксис квадратних дужок масив[індекс]. Між ім'ям змінної масиву і квадратними дужками не повинно бути пробілу.

Увага
Індексація елементів масиву починається з нуля.

const planets = ["Earth", "Mars", "Venus"];
planets[0]; // "Earth"
planets[2]; // "Venus"


==================
continue перериває поточну ітерацію і відправляє на наступну, одрузу їдете відновлювати своє значення лічильника
break - одразу перериває цикл

================


Ітерація
Ітерація масиву це проходження масиву для отримання кожного елементу масиву.

Для проходження масиву у Javascript використовується цикл for, for..of, for...in.

var arr=['молоко', 'хліб', 'масло'];

for(let i=0;i<arr.length;i++){
	console.log(arr[i]);
}

for(let key in arr){
	console.log(arr[key]);
}

for(let value of arr){
	console.log(value);
}

Також проходження масиву можна реалізувати за допомогою циклу while.

var arr=['молоко', 'хліб', 'масло'];

var i=0;
while(i<arr.length){
  console.log(arr[i]);
  i++;
}
У JavaScript є метод Array.forEach() який дозволяє виконати функцію для кожного елемента масиву:

var arr=['молоко', 'хліб', 'масло'];

arr.forEach(function(value, index){console.log(value);});
Ще одним способом проходження масиву є ітератори, для отримання ітератора є методи: Array.keys(), Array.values(), entries().

var arr=['молоко', 'хліб', 'масло'];

var intera=arr.values();
var result=intera.next();
while(result.done==false){
  console.log(result.value);
  result=intera.next();
}
==========================

for
for - цикл, виконує код доки умова дорівнює true.
Одразу звертаєтесь до елемента масива

Синтаксис:
for(ініціалізація;умова;крок)
Параметри:
ініціалізація - виконує лише один раз, оголошується змінна (змінні) яка необхідна для умови і кроку. Для оголошення використовується var або let.

умова - умова яка перевіряється при кожному циклі. Якщо умова дорівнює true то виконується код і змінна збільшується на вказаний крок. У випадку коли умова дорівнює false цикл зупиняється.

крок - виконується кожного разу при повторному виконанні циклу,вказується на скільки збільшується зміна(яка вказується при ініціалізації) після кожного циклу.

Якщо не вказати параметри циклу то отримаємо вічний цикл for(;;) :

for(;;){
 alert('Ой, Ви запустили вічний цикл! :-(');
}
Увага не рекомендовано використовувати вічний цикл інакше це призведе до зациклення коду, у випадку коли використовуєте використовуйте оператор break для виходу з циклу.

Опис:
Цикл використовується якщо необхідно виконати певний код потрібну кількість разів, пройти масив.

Також цикл можна зупинити за допомогою оператора break або перейти до наступного проходу цикла за допомогою оператора continue.

При ініціалізація оголошується змінні за допомогою var або let. Різниця полягає в тому що let оголошує локальну змінну яка доступна лише у області циклу, тоді як за допомогою var змінна доступна за межами циклу.

for(var a=1;a<3;a++){
alert('змінна a в циклі: '+a);
}
alert('змінна a за циклом оголошена за допомогою var: '+a);
for(let a=1;a<3;a++){
alert('змінна a в циклі: '+a);
}
alert('змінна a за циклом оголошена за допомогою let: '+a); //Error a is not defined
Також можна але не рекомендовано при ініціалізації циклу не використовувати var або let:

for(i=0;i<3;i++) alert(i);
Якщо оголошувати змінні в ініціалізації циклу без var то може виникнути ситуація що коли викликається інший цикл з оголошеною такоюж назвою зміної то значення зміної зміниться і перший цикл перевіривши вказану умову завершиться швидше ніж очікувалося:

//функція A
function A(){
for(i=1;i<=3;i++){ //цикл функції A від 1 до 3
alert('A : '+i);
B(); //викликаємо функцію B
}
}

//функція B
function B(){
for(i=1;i<=3;i++){ //цикл функції B від 1 до 3
alert('B : '+i);
}
}

A(); //виклик функції A
Приклад:
for(var i=0;i < 3; i++)
alert(i);

for(var x=1; x<10; x=x+2)
console.log(x);
for(var i=0, x=1; i<3;i++, x+=2){
alert('i: '+i+' x: '+x);
}
Приклад проходження масиву:

var mas=[1, 81, 36, 7];
for(var i=0;i<mas.length;i++){
  console.log(mas[i]);
}
Приклад використання continue у циклі for:

for(var i=0;i<7;i++){
  if(i==5) continue; //якщо i==5 тоді переходимо до наступного циклу
  console.log(i);
}
Приклад використання оператора break у циклі for:

for(var i=0;i<5;i++){
   if(i==3) break;
  console.log(i);

  ============================================
  for ... of

  працюючи з циклом, ви ств копію елемента
for ... of - цикл призначений для проходження по спископодібних об'єктах.

Синтаксис:
for(values of object)
Параметри:
values - назва змінної яка приймає значення.

object - об'єкт які властивості необхідно пройти.

Цей оператор не підтримують старі браузери.

Опис:
Оператор for ... of призначений для ітерації за елементами колекцій спископодібних об'єктів Array, String, Map, Set, об'єкт аргументів і т.п.

for ... of - проходить по значеннях властивостях, за довільною послідовністю.

for ... in проходить по назвах властивостях, а for ... of проходить по самих властивостях.

var mas = new Array(1,2,3);
mas.top='top';

for(a in mas)
console.log(mas[a]); //1, 2, 3, 'top'

for(b of mas)
console.log(b); //1, 2, 3

Зверніть увагу якщо використовувати for...of для не спископодібного об'єкту (наприклад Object) то виникне помилка:

var obj={x:5,y:2};

for(a of obj)alert(a); //TypeError: obj is not iterable
Тоді як for...in дозволяє обходити об'єкти:

var obj={x:5,y:2};

for(a in obj)alert(a);
Приклад:
var mas =[1,2,3];
for(a of mas)alert(a);
function test(){
for(let value of arguments)alert(value);
}

test(25,'5_5');
var mas = new Array("нуль",1,2,3);
for(a of mas) console.log(a);
var s='JS';

for(value of s)alert(value);

============================
for ... in
for...in - цикл призначений для проходження по властивостях об'єкту.

Синтаксис:
for(key in object)
Параметри:
key - назва змінної яка приймає назву властивості.

object - об'єкт які властивості необхідно пройти. Це може бути Object, Array, String

Цикл for ... in проходить тільки по перелічуваних властивостях, за довільною послідовністю.

Цикл можна зупинити за допомогою оператора break або перейти до наступного проходу цикла за допомогою оператора continue.

Приклад:
var ob={top:1};
for(a in ob) alert(a); //змінній a присвоюється назва властивості об'єкта ob

var ob={top:1};
for(a in ob){ x=ob[a];//змінній x присвоюється значення властивості
alert('a= '+a+' x= '+x);
}

Проходження об'єкта за допомогою for...in :

var ob={top:1, left:15, right:74};
for(a in ob){ x=ob[a];
console.log('ob.'+a+' = '+x);
}

Проходження масива за допомогою for...in :

var mas = new Array("один", 2, 3);
for(key in mas){
   console.log(mas[key]);
}

Проходження рядка:

var s='JS';

for(let a in s)alert(a);
var s='JS';

for(let a in s)alert(s[a]);

==========================
Array.prototype.push()
Сводка
Метод push() добавляет один или более элементов в конец массива и возвращает новую длину массива.

Синтаксис
arr.push(element1, ..., elementN)
Параметры
elementN
Элементы, добавляемые в конец массива.

Возвращаемое значение
Новое значение свойства length объекта, для которого был вызван данный метод.

Описание
Метод push присоединяет значения к массиву.

Метод push не является привязанным к типу; этот метод может быть вызван или применён к объектам, напоминающим массив. Метод опирается на свойство length для определения места вставки значений. Если свойство length не может быть преобразовано в число, будет использовать индекс 0. Сюда входит случай несуществования свойства length, в этом случае оно также будет создано.

Единственными родными массивоподобными объектами являются строки, хотя к ним он не может быть применён, поскольку строки являются неизменяемыми.

Примеры
Пример: добавление элементов в массив
Следующий код создаёт массив sports, содержащий два элемента, а затем добавляет к нему ещё два элемента. Переменная total будет содержать новую длину массива.

var sports = ['футбол', 'бейсбол'];
var total = sports.push('американский футбол', 'плавание');

console.log(sports); // ['футбол', 'бейсбол', 'американский футбол', 'плавание']
console.log(total);  // 4
Copy to Clipboard
Пример: слияние двух массивов
В этом примере используется функция apply() для помещения всех элементов из второго массива в первый.

var vegetables = ['пастернак', 'картошка'];
var moreVegs = ['сельдерей', 'свёкла'];

// Сливает второй массив с первым
// Эквивалентно вызову vegetables.push('сельдерей', 'свёкла');
Array.prototype.push.apply(vegetables, moreVegs);

console.log(vegetables); // ['пастернак', 'картошка', 'сельдерей', 'свёкла']
Copy to Clipboard

========================
Array.pop()
Array.pop() - видаляє останній елемент з масиву і повертає його значення.

Синтаксис:
arr.pop();
Опис:
pop() метод об'єкту Array який видаляє останній елемент з масиву і повертає видалене значення.

Якщо ви викличете pop() на порожньому масиві, він поверне значення undefined.

Приклад:
var a = ["а","б","в","я"];
c=a.pop(3); //a=[а,б,в]
alert(c); //"я"

var mas = Array.of(12, 5, 1, "JS");
mas.pop();
alert(mas);


===============================
Array.shift()
Array.shift() - видаляє перший елемент з масиву і повертає його значення. Цей метод змінює довжину масиву.

Синтаксис:
arr.shift();
Опис:
shift() метод об'єкту Array який видаляє елемент з нульового індексу, зрушує значення по послідовним індексам вниз, а потім повертає видалене значення. Якщо властивість length масиву дорівнює 0, поверне undefined.

Приклад:

var a = ["а","б","в"];
a.shift();
alert(a); //б,в

var mas = new Array("JS", "JavaScript", "Джаваскрипт");
mas.shift();
alert(mas);


===============================
Array.unshift()
Array.unshift() - додає один або більше елементів в початок масиву і повертає нову довжину масиву.

Синтаксис:
 arr.unshift([ element1 [, ...[, elementN]]]) 
Параметри:
element1, ..., element N - Необов'язкові параметри. Елементи, що додаються в початок масиву.

Опис:
unshift() метод об'єкту Array який встановлює передані значення в початок масиву.

Повертає нове значення властивості length.

Приклад:

var ar = new Array();
ar.unshift(10, 11);
ar.unshift(12, 13, 14);
alert(ar.toString()); // 12,13,14,10,11

var mas = new Array(12.2, 9, "JS");
mas.unshift(0, 1 , 2);
alert( mas );


==============================
Array.splice()
Array.splice() - видаляє елементи з масиву і при необхідності вставляє на їх місце нові елементи, повертаючи вилучені елементи.

Синтаксис:
array.splice( start, deleteCount [, item1[, item2[, ...]]])
Параметри:
start - Індекс, за яким починати змінювати масив. Якщо більше довжини масиву, реальний індекс буде встановлений на довжину масиву. Якщо негативний, вказує індекс елемента з кінця.

deleteCount - Ціле число, що показує кількість старих видаляються з масиву елементів. якщо deleteCount дорівнює 0, елементи не видаляються. В цьому випадку ви повинні вказати як мінімум один новий елемент. Якщо deleteCount більше кількості елементів, що залишилися в масиві, починаючи з індексу start, то будуть видалені всі елементи до кінця масиву.

itemN - Необов'язкові параметри. Додаються до масиву елементи. Якщо ви не вкажете ніякого елемента, splice() просто видалить елементи з масиву. значення, що повертається Масив, що містить видалені елементи. Якщо буде видалений тільки один елемент, повернеться масив з одного елемента. Якщо ніякі елементи не будуть видалені, повернеться порожній масив.

Опис
splice() метод об'єкту Array який видаляє вказані елементи з масиву і при необхідності замінює новими елементами.

Метод splice() змінює поточний масив, а повертає масив з видаленими елементами.

Приклад:
var mas=[1,2,3,4];
mas.splice(2,1);
alert(mas); //[1,2,4]
var mas=[1,2,3,4,5,6,7];
b=mas.splice(2,3,88,99,107); //b=[3,4,5]
alert(mas); // [1,2,88,99,107,6,7]

var mas = new Array(1, 9, 8, 2, "JS");
mas.splice(3);
alert( mas );

===============================

Array.slice()
Array.slice() - повертає поверхневу копію частини масиву в новий об'єкт масиву.

Синтаксис:
arr.slice([ begin [, end ]]);
Параметри:
begin - Індекс (рахунок починається з нуля), за яким починати витяг. Якщо індекс негативний, begin вказує зміщення від кінця послідовності. Виклик slice (-2) витягне два останніх елемента послідовності. Якщо begin опущений, slice () починає працювати з індексу 0.

end - Індекс (рахунок починається з нуля), за яким закінчувати витяг. Метод slice() витягує елементи з індексом менше end. Виклик slice (1, 4) витягне елементи з другого по четвертий (елементи за індексами 1, 2 і 3). Якщо індекс негативний, end вказує зміщення від кінця послідовності. виклик slice (2, -1) витягне з послідовності елементи з третього по другій з кінця. Якщо end опущений, slice () витягує всі елементи до кінця послідовності (arr.length).

Опис:
slice() метод об'єкту Array який копію масиву, не змінює вихідний масив, а повертає нову не глибоку копію, яка містить копії елементів, вирізаних з вихідного масиву.

"Не глибока копія" копіює посилання на об’єкт до нового масиву. Тобто якщо об’єкт, на який посилається, змінено, зміни будуть видимі у двох масивах.

Приклад:
var a = [1,2,3,4,5,6,7,8,9];

mas=a.slice(5);
alert(mas); //[6,7,8,9]

a.slice(5,2); //[]
a.slice(5,7); //[6,7]

var mas = new Array("JS", "JavaScript", "Джаваскрипт", "ЯваСкрипт");
var newMas = mas.slice(1, 3);
alert( newMas );
Відображення зміни у неглибокому копіюванні масиву:
var a=['один', {x:1}];
var b=a.slice();

b[0]='два'; //знінює лише у b
b[1].x=2; //змінює у a і b

alert(JSON.stringify(a));
alert(JSON.stringify(b));

================================
Array.concat()
Array.concat - об'єднує масив з масивом або з значенням.

Синтаксис:
 var new_array = old_array .concat( value1 [,value2[, ...[, valueN ]]]) 
Параметри:
valueN - масив або значення, що з'єднуються в новий масив.

Опис:
concat() метод об'єкту Array який створює новий масив, що складається з елементів поточного масиву і масиву або значень переданих у параметрах.

Приклад:
var a = [1,2,3], b=[4,5,6];

c= a.concat(b, 10);
alert(c); //[1,2,3,4,5,6,10]
Приклад об'єднання двох масивів:

var mas1=new Array(12, 5, 8), mas2=new Array(99, 66, 25, 1);

var newMas= mas1.concat(mas2);

alert(newMas);



================================
String.split()
split() - розбиває рядок на масив рядків шляхом розділення рядка вказаним підрядком.

Синтаксис:
str.split([ separator [, limit]])
Параметри:
separator - не обов'язковий параметр. Вказує символи або регулярний вираз. Якщо параметр дорівнює пустому рядку ("") то рядок буду перетворено в масив символів. Якщо параметр не вказано повертає масив з одним рядковим елементом.

limit - не обов'язковий параметр. Ціле число, вказує обмеження на кількість елементів масиву.

Опис:
split() метод об'єкту String який розбиває рядок на частини за вказаним роздільником і повертає новий масив з частин.

Якщо роздільник separator знайдений, він видаляється з рядка, а підрядки повертаються в масиві. Якщо роздільник опущений, масив буде містити тільки один елемент, що складається з усього рядка. Якщо роздільник є символом нового рядка, рядок str буде перетворена в масив символів.

Якщо роздільник є регулярним виразом, що містить підгрупи, то кожен раз при зіставленні з роздільником, результати (включаючи ті, що не визначені) захоплення підгрупи будуть поміщатися всередину вихідного масиву. Однак, не всі браузери підтримують цю можливість.

Приклад:
var s = "5 25 45 26 47 85";
mas = s.split(' ');
alert( mas );

var s="Київ, Львів, Одеса, Харків";

x=s.split(','); //x=array("Київ"," Львів"," Одеса"," Харків");

s="text";
x=s.split(''); //x=array("t","e","x","t");

s="";
x=s.split(); //array("");

===================================
Array.join()
Array.join() - об'єднує всі елементи масиву в рядок.

Синтаксис:
str = arr.join([ separator = ',']) 
separator - Необов'язковий параметр. Визначається рядок, що розділяє елементи масиву. Роздільник наводиться до рядка в разі потреби. Якщо він опущений, елементи масиву розділяються комою.

Опис:
join() метод об'єкту Array який перетворює всі елементи масиву в рядки і об'єднує їх в один великий рядок.

Для того щоб рядок перетворити на масив використовуйте метод String.split().

Приклад:
var a = [1,2,3,4,5,6,7,8,9];

s=a.join();
alert(s); //"1,2,3,4,5,6,7,8,9"

a.join(" "); //"1 2 3 4 5 6 7 8 9"

var mas = new Array("5", "пара", "9", 25, 9);

s = mas.join(" - ");
alert(s);

=============================================
Array.indexOf()
Array.indexOf() - пошук елемента у масиві.

Синтаксис:
arr.indexOf( searchElement
[, fromIndex = 0]) 
Параметри:
searchElement - Шуканий елемент в масиві.

fromIndex - Індекс, з якого починати пошук. Якщо індекс більше або дорівнює довжини масиву, повертається -1, що означає, що масив навіть не проглядається. Якщо індекс є негативним числом, він трактується як зміщення з кінця масиву. Зверніть увагу: якщо індекс негативний, масив все одно проглядається від початку до кінця. Якщо розрахований індекс виявляється менше 0, пошук ведеться по всьому масиву. Значення за замовчуванням дорівнює 0, що означає, що проглядається весь масив.

Опис:
indexOf() метод об'єкту Array який порівнює шуканий елемент searchElement з елементами в масиві, використовуючи суворе порівняння (такий же метод використовується оператором ===) і повертає індекс знайденого елемента.

Якщо елемент не знайдено повертає -1.

Для пошуку з кінця масиву використовують lastIndexOf. Для складного пошуку використовуйте метод Array.find().

Приклад:
var a = [4,6,7,3,12,1,0,3];

s=a.indexOf(1);
alert(s); //5

var arr=new Array(15, "три", 3, 4);
alert( arr.indexOf("три") ); //1
var arr=new Array(55, 36, 8, 96, 2, 41, 7);
alert( arr.indexOf(0) ); //-1

=========================================
Array.includes()
Array.includes() - визначає, чи містить масив певний елемент.

Синтаксис:
array.includes(searchElement[, fromIndex]);
Параметри:
searchElement - елемент який необхідно шукати.

fromIndex - Необов'язковий параметр. Позиція в масиві, з якої починати пошук елемента searchElement; за умовчанням встановлена ​​в 0.

Опис:
includes() метод який шукає елемент в масиві і повертає true якщо такий елемент є або false якщо такого елемента немає.

Не всі браузери підтримують.

Приклад:

var a = [1,2,3,4,5,6];
c=a.includes(3);
alert(c);

var mas = new Array(1, 3, 12, 16, 17, 21, 9);

alert( mas.includes(5) ); //false
var mas = new Array("5", "пара", "9", 25, 9);

alert( mas.includes(9, 3) ); //true
